<?php
/*
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace YtelAPIV3Lib\Controllers;

use YtelAPIV3Lib\APIException;
use YtelAPIV3Lib\APIHelper;
use YtelAPIV3Lib\Configuration;
use YtelAPIV3Lib\Models;
use YtelAPIV3Lib\Exceptions;
use YtelAPIV3Lib\Http\HttpRequest;
use YtelAPIV3Lib\Http\HttpResponse;
use YtelAPIV3Lib\Http\HttpMethod;
use YtelAPIV3Lib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class ConferenceController extends BaseController
{
    /**
     * @var ConferenceController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return ConferenceController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Play an audio file during a conference.
     *
     * @param string $conferenceSid  The unique identifier for a conference object.
     * @param string $participantSid The unique identifier for a participant object.
     * @param string $audioUrl       The URL for the audio file that is to be played during the conference. Multiple
     *                               audio files can be chained by using a semicolon.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPlayAudio(
        $conferenceSid,
        $participantSid,
        $audioUrl
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/playAudio.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'ConferenceSid'  => $conferenceSid,
            'ParticipantSid' => $participantSid,
            'AudioUrl'     => APIHelper::prepareFormFields($audioUrl)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Remove a participant from a conference.
     *
     * @param string $participantSid The unique identifier for a participant object.
     * @param string $conferenceSid  The unique identifier for a conference object.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createHangupParticipant(
        $participantSid,
        $conferenceSid
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/hangupParticipant.json';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'ParticipantSid' => $participantSid,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'ConferenceSid'  => $conferenceSid
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrieve information about a conference by its ConferenceSid.
     *
     * @param string $conferenceSid The unique identifier of each conference resource
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createViewConference(
        $conferenceSid
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/viewconference.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'ConferenceSid' => $conferenceSid
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrieve information about a participant by its ParticipantSid.
     *
     * @param string $conferenceSid  The unique identifier for a conference object.
     * @param string $participantSid The unique identifier for a participant object.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createViewParticipant(
        $conferenceSid,
        $participantSid
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/viewParticipant.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'ConferenceSid'  => $conferenceSid,
            'ParticipantSid' => $participantSid
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Deaf Mute Participant
     *
     * @param string $conferenceSid  ID of the active conference
     * @param string $participantSid ID of an active participant
     * @param bool   $muted          (optional) Mute a participant
     * @param bool   $deaf           (optional) Make it so a participant cant hear
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSilenceParticipant(
        $conferenceSid,
        $participantSid,
        $muted = null,
        $deaf = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/deafMuteParticipant.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'conferenceSid'  => $conferenceSid,
            'ParticipantSid' => $participantSid,
            'Muted'          => var_export($muted, true),
            'Deaf'           => var_export($deaf, true)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Add Participant in conference
     *
     * @param string $conferenceSid     The unique identifier for a conference object.
     * @param string $participantNumber The phone number of the participant to be added.
     * @param bool   $muted             (optional) Specifies if participant should be muted.
     * @param bool   $deaf              (optional) Specifies if the participant should hear audio in the conference.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function addParticipant(
        $conferenceSid,
        $participantNumber,
        $muted = null,
        $deaf = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/addParticipant.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'      => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'ConferenceSid'     => $conferenceSid,
            'ParticipantNumber' => $participantNumber,
            'Muted'             => var_export($muted, true),
            'Deaf'              => var_export($deaf, true)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Here you can experiment with initiating a conference call through Ytel and view the request response
     * generated when doing so.
     *
     * @param string  $url                  URL requested once the conference connects
     * @param string  $from                 A valid 10-digit number (E.164 format) that will be initiating the
     *                                      conference call.
     * @param string  $to                   A valid 10-digit number (E.164 format) that is to receive the conference
     *                                      call.
     * @param string  $method               (optional) Specifies the HTTP method used to request the required URL once
     *                                      call connects.
     * @param string  $statusCallBackUrl    (optional) URL that can be requested to receive notification when call has
     *                                      ended. A set of default parameters will be sent here once the conference is
     *                                      finished.
     * @param string  $statusCallBackMethod (optional) Specifies the HTTP methodlinkclass used to request
     *                                      StatusCallbackUrl.
     * @param string  $fallbackUrl          (optional) URL requested if the initial Url parameter fails or encounters
     *                                      an error
     * @param string  $fallbackMethod       (optional) Specifies the HTTP method used to request the required
     *                                      FallbackUrl once call connects.
     * @param bool    $record               (optional) Specifies if the conference should be recorded.
     * @param string  $recordCallBackUrl    (optional) Recording parameters will be sent here upon completion.
     * @param string  $recordCallBackMethod (optional) Specifies the HTTP method used to request the required URL once
     *                                      conference connects.
     * @param string  $scheduleTime         (optional) Schedule conference in future. Schedule time must be greater
     *                                      than current time
     * @param integer $timeout              (optional) The number of seconds the call stays on the line while waiting
     *                                      for an answer. The max time limit is 999 and the default limit is 60
     *                                      seconds but lower times can be set.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createConference(
        $url,
        $from,
        $to,
        $method = null,
        $statusCallBackUrl = null,
        $statusCallBackMethod = null,
        $fallbackUrl = null,
        $fallbackMethod = null,
        $record = null,
        $recordCallBackUrl = null,
        $recordCallBackMethod = null,
        $scheduleTime = null,
        $timeout = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/createConference.json';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'Url'                  => $url,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'         => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'From'                 => $from,
            'To'                   => $to,
            'Method'               => $method,
            'StatusCallBackUrl'    => $statusCallBackUrl,
            'StatusCallBackMethod' => $statusCallBackMethod,
            'FallbackUrl'          => $fallbackUrl,
            'FallbackMethod'       => $fallbackMethod,
            'Record'               => var_export($record, true),
            'RecordCallBackUrl'    => $recordCallBackUrl,
            'RecordCallBackMethod' => $recordCallBackMethod,
            'ScheduleTime'         => $scheduleTime,
            'Timeout'              => $timeout
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrieve a list of participants for an in-progress conference.
     *
     * @param string  $conferenceSid The unique identifier for a conference.
     * @param integer $page          (optional) The page count to retrieve from the total results in the collection.
     *                               Page indexing starts at 1.
     * @param integer $pagesize      (optional) The count of objects to return per page.
     * @param bool    $muted         (optional) Specifies if participant should be muted.
     * @param bool    $deaf          (optional) Specifies if the participant should hear audio in the conference.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createListParticipants(
        $conferenceSid,
        $page = null,
        $pagesize = null,
        $muted = null,
        $deaf = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/listParticipant.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'ConferenceSid' => $conferenceSid,
            'Page'          => $page,
            'Pagesize'      => $pagesize,
            'Muted'         => var_export($muted, true),
            'Deaf'          => var_export($deaf, true)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrieve a list of conference objects.
     *
     * @param integer $page         (optional) The page count to retrieve from the total results in the collection.
     *                              Page indexing starts at 1.
     * @param integer $pagesize     (optional) Number of individual resources listed in the response per page
     * @param string  $friendlyName (optional) Only return conferences with the specified FriendlyName
     * @param string  $dateCreated  (optional) Conference created date
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createListConferences(
        $page = null,
        $pagesize = null,
        $friendlyName = null,
        $dateCreated = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/conferences/listconference.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'page'         => $page,
            'pagesize'     => $pagesize,
            'FriendlyName' => $friendlyName,
            'DateCreated'  => $dateCreated
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }
}
