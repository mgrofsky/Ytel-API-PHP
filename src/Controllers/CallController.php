<?php
/*
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace YtelAPIV3Lib\Controllers;

use YtelAPIV3Lib\APIException;
use YtelAPIV3Lib\APIHelper;
use YtelAPIV3Lib\Configuration;
use YtelAPIV3Lib\Models;
use YtelAPIV3Lib\Exceptions;
use YtelAPIV3Lib\Http\HttpRequest;
use YtelAPIV3Lib\Http\HttpResponse;
use YtelAPIV3Lib\Http\HttpMethod;
use YtelAPIV3Lib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class CallController extends BaseController
{
    /**
     * @var CallController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return CallController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Retrieve a single voice call’s information by its CallSid.
     *
     * @param string $callSid The unique identifier for the voice call.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createViewCall1(
        $callSid
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/viewcalldetail.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'callSid' => $callSid
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrieve a single voice call’s information by its CallSid.
     *
     * @param string $callsid The unique identifier for the voice call.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createViewCall(
        $callsid
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/viewcalls.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'callsid' => $callsid
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Play Dtmf and send the Digit
     *
     * @param string $callSid           The unique identifier of each call resource
     * @param string $playDtmf          DTMF digits to play to the call. 0-9, #, *, W, or w
     * @param string $playDtmfDirection (optional) The leg of the call DTMF digits should be sent to
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPlayDTMF(
        $callSid,
        $playDtmf,
        $playDtmfDirection = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/senddigits.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'      => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'CallSid'           => $callSid,
            'PlayDtmf'          => $playDtmf,
            'PlayDtmfDirection' => APIHelper::prepareFormFields($playDtmfDirection)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * You can experiment with initiating a call through Ytel and view the request response generated when
     * doing so and get the response in json
     *
     * @param string  $from                  A valid Ytel Voice enabled number (E.164 format) that will be initiating
     *                                       the phone call.
     * @param string  $to                    To number
     * @param string  $url                   URL requested once the call connects
     * @param string  $method                (optional) Specifies the HTTP method used to request the required URL once
     *                                       call connects.
     * @param string  $statusCallBackUrl     (optional) URL that can be requested to receive notification when call has
     *                                       ended. A set of default parameters will be sent here once the call is
     *                                       finished.
     * @param string  $statusCallBackMethod  (optional) Specifies the HTTP methodlinkclass used to request
     *                                       StatusCallbackUrl.
     * @param string  $fallBackUrl           (optional) URL requested if the initial Url parameter fails or encounters
     *                                       an error
     * @param string  $fallBackMethod        (optional) Specifies the HTTP method used to request the required
     *                                       FallbackUrl once call connects.
     * @param string  $heartBeatUrl          (optional) URL that can be requested every 60 seconds during the call to
     *                                       notify of elapsed tim
     * @param string  $heartBeatMethod       (optional) Specifies the HTTP method used to request HeartbeatUrl.
     * @param integer $timeout               (optional) Time (in seconds) Ytel should wait while the call is ringing
     *                                       before canceling the call
     * @param string  $playDtmf              (optional) DTMF Digits to play to the call once it connects. 0-9, #, or *
     * @param bool    $hideCallerId          (optional) Specifies if the caller id will be hidden
     * @param bool    $record                (optional) Specifies if the call should be recorded
     * @param string  $recordCallBackUrl     (optional) Recording parameters will be sent here upon completion
     * @param string  $recordCallBackMethod  (optional) Method used to request the RecordCallback URL.
     * @param bool    $transcribe            (optional) Specifies if the call recording should be transcribed
     * @param string  $transcribeCallBackUrl (optional) Transcription parameters will be sent here upon completion
     * @param string  $ifMachine             (optional) How Ytel should handle the receiving numbers voicemail machine
     * @param string  $ifMachineUrl          (optional) URL requested when IfMachine=continue
     * @param string  $ifMachineMethod       (optional) Method used to request the IfMachineUrl.
     * @param bool    $feedback              (optional) Specify if survey should be enable or not
     * @param string  $surveyId              (optional) The unique identifier for the survey.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createMakeCall(
        $from,
        $to,
        $url,
        $method = null,
        $statusCallBackUrl = null,
        $statusCallBackMethod = null,
        $fallBackUrl = null,
        $fallBackMethod = null,
        $heartBeatUrl = null,
        $heartBeatMethod = null,
        $timeout = null,
        $playDtmf = null,
        $hideCallerId = null,
        $record = null,
        $recordCallBackUrl = null,
        $recordCallBackMethod = null,
        $transcribe = null,
        $transcribeCallBackUrl = null,
        $ifMachine = null,
        $ifMachineUrl = null,
        $ifMachineMethod = null,
        $feedback = null,
        $surveyId = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/makecall.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'          => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'From'                  => $from,
            'To'                    => $to,
            'Url'                   => $url,
            'Method'                => $method,
            'StatusCallBackUrl'     => $statusCallBackUrl,
            'StatusCallBackMethod'  => $statusCallBackMethod,
            'FallBackUrl'           => $fallBackUrl,
            'FallBackMethod'        => $fallBackMethod,
            'HeartBeatUrl'          => $heartBeatUrl,
            'HeartBeatMethod'       => $heartBeatMethod,
            'Timeout'               => $timeout,
            'PlayDtmf'              => $playDtmf,
            'HideCallerId'          => var_export($hideCallerId, true),
            'Record'                => var_export($record, true),
            'RecordCallBackUrl'     => $recordCallBackUrl,
            'RecordCallBackMethod'  => $recordCallBackMethod,
            'Transcribe'            => var_export($transcribe, true),
            'TranscribeCallBackUrl' => $transcribeCallBackUrl,
            'IfMachine'           => APIHelper::prepareFormFields($ifMachine),
            'IfMachineUrl'          => $ifMachineUrl,
            'IfMachineMethod'       => $ifMachineMethod,
            'Feedback'              => var_export($feedback, true),
            'SurveyId'              => $surveyId
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Play Audio from a url
     *
     * @param string  $callSid   The unique identifier of each call resource
     * @param string  $audioUrl  URL to sound that should be played. You also can add more than one audio file using
     *                           semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
     * @param string  $sayText   Valid alphanumeric string that should be played to the In-progress call.
     * @param integer $length    (optional) Time limit in seconds for audio play back
     * @param string  $direction (optional) The leg of the call audio will be played to
     * @param bool    $mix       (optional) If false, all other audio will be muted
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPlayAudio(
        $callSid,
        $audioUrl,
        $sayText,
        $length = null,
        $direction = null,
        $mix = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/playaudios.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'CallSid'   => $callSid,
            'AudioUrl'  => $audioUrl,
            'SayText'   => $sayText,
            'Length'    => $length,
            'Direction' => APIHelper::prepareFormFields($direction),
            'Mix'       => var_export($mix, true)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Start or stop recording of an in-progress voice call.
     *
     * @param string  $callSid     The unique identifier of each call resource
     * @param bool    $record      Set true to initiate recording or false to terminate recording
     * @param string  $direction   (optional) The leg of the call to record
     * @param integer $timeLimit   (optional) Time in seconds the recording duration should not exceed
     * @param string  $callBackUrl (optional) URL consulted after the recording completes
     * @param string  $fileformat  (optional) Format of the recording file. Can be .mp3 or .wav
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createRecordCall(
        $callSid,
        $record,
        $direction = null,
        $timeLimit = null,
        $callBackUrl = null,
        $fileformat = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/recordcalls.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'CallSid'     => $callSid,
            'Record'      => var_export($record, true),
            'Direction' => APIHelper::prepareFormFields($direction),
            'TimeLimit'   => $timeLimit,
            'CallBackUrl' => $callBackUrl,
            'Fileformat' => APIHelper::prepareFormFields($fileformat)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Add audio voice effects to the an in-progress voice call.
     *
     * @param string $callSid        The unique identifier for the in-progress voice call.
     * @param string $audioDirection (optional) The direction the audio effect should be placed on. If IN, the effects
     *                               will occur on the incoming audio stream. If OUT, the effects will occur on the
     *                               outgoing audio stream.
     * @param double $pitchSemiTones (optional) Set the pitch in semitone (half-step) intervals. Value between -14 and
     *                               14
     * @param double $pitchOctaves   (optional) Set the pitch in octave intervals.. Value between -1 and 1
     * @param double $pitch          (optional) Set the pitch (lowness/highness) of the audio. The higher the value,
     *                               the higher the pitch. Value greater than 0
     * @param double $rate           (optional) Set the rate for audio. The lower the value, the lower the rate. value
     *                               greater than 0
     * @param double $tempo          (optional) Set the tempo (speed) of the audio. A higher value denotes a faster
     *                               tempo. Value greater than 0
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createVoiceEffect(
        $callSid,
        $audioDirection = null,
        $pitchSemiTones = null,
        $pitchOctaves = null,
        $pitch = null,
        $rate = null,
        $tempo = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/voiceeffect.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'CallSid'        => $callSid,
            'AudioDirection' => APIHelper::prepareFormFields($audioDirection),
            'PitchSemiTones' => $pitchSemiTones,
            'PitchOctaves'   => $pitchOctaves,
            'Pitch'          => $pitch,
            'Rate'           => $rate,
            'Tempo'          => $tempo
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Interrupt the Call by Call Sid
     *
     * @param string $callSid The unique identifier for voice call that is in progress.
     * @param string $url     (optional) URL the in-progress call will be redirected to
     * @param string $method  (optional) The method used to request the above Url parameter
     * @param string $status  (optional) Status to set the in-progress call to
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createInterruptCall(
        $callSid,
        $url = null,
        $method = null,
        $status = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/interruptcalls.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'CallSid' => $callSid,
            'Url'     => $url,
            'Method'  => $method,
            'Status' => APIHelper::prepareFormFields($status)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * A list of calls associated with your Ytel account
     *
     * @param integer $page        (optional) The page count to retrieve from the total results in the collection. Page
     *                             indexing starts at 1.
     * @param integer $pageSize    (optional) Number of individual resources listed in the response per page
     * @param string  $to          (optional) Filter calls that were sent to this 10-digit number (E.164 format).
     * @param string  $from        (optional) Filter calls that were sent from this 10-digit number (E.164 format).
     * @param string  $dateCreated (optional) Return calls that are from a specified date.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createListCalls(
        $page = null,
        $pageSize = null,
        $to = null,
        $from = null,
        $dateCreated = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/listcalls.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'Page'        => $page,
            'PageSize'    => $pageSize,
            'To'          => $to,
            'From'        => $from,
            'DateCreated' => $dateCreated
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Initiate an outbound Ringless Voicemail through Ytel.
     *
     * @param string $from                A valid Ytel Voice enabled number (E.164 format) that will be initiating the
     *                                    phone call.
     * @param string $rVMCallerId         A required secondary Caller ID for RVM to work.
     * @param string $to                  A valid number (E.164 format) that will receive the phone call.
     * @param string $voiceMailURL        The URL requested once the RVM connects. A set of default parameters will be
     *                                    sent here.
     * @param string $method              (optional) Specifies the HTTP method used to request the required URL once
     *                                    call connects.
     * @param string $statusCallBackUrl   (optional) URL that can be requested to receive notification when call has
     *                                    ended. A set of default parameters will be sent here once the call is
     *                                    finished.
     * @param string $statsCallBackMethod (optional) Specifies the HTTP method used to request the required
     *                                    StatusCallBackUrl once call connects.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSendRVM(
        $from,
        $rVMCallerId,
        $to,
        $voiceMailURL,
        $method = null,
        $statusCallBackUrl = null,
        $statsCallBackMethod = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/makervm.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'        => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'From'                => $from,
            'RVMCallerId'         => $rVMCallerId,
            'To'                  => $to,
            'VoiceMailURL'        => $voiceMailURL,
            'Method'              => $method,
            'StatusCallBackUrl'   => $statusCallBackUrl,
            'StatsCallBackMethod' => $statsCallBackMethod
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Group Call
     *
     * @param string  $from                  This number to display on Caller ID as calling
     * @param string  $to                    Please enter multiple E164 number. You can add max 10 numbers. Add numbers
     *                                       separated with comma. e.g : 1111111111,2222222222
     * @param string  $url                   URL requested once the call connects
     * @param string  $groupConfirmKey       Define the DTMF that the called party should send to bridge the call.
     *                                       Allowed Values : 0-9, #, *
     * @param string  $groupConfirmFile      Specify the audio file you want to play when the called party picks up the
     *                                       call
     * @param string  $method                (optional) Specifies the HTTP method used to request the required URL once
     *                                       call connects.
     * @param string  $statusCallBackUrl     (optional) URL that can be requested to receive notification when call has
     *                                       ended. A set of default parameters will be sent here once the call is
     *                                       finished.
     * @param string  $statusCallBackMethod  (optional) Specifies the HTTP methodlinkclass used to request
     *                                       StatusCallbackUrl.
     * @param string  $fallBackUrl           (optional) URL requested if the initial Url parameter fails or encounters
     *                                       an error
     * @param string  $fallBackMethod        (optional) Specifies the HTTP method used to request the required
     *                                       FallbackUrl once call connects.
     * @param string  $heartBeatUrl          (optional) URL that can be requested every 60 seconds during the call to
     *                                       notify of elapsed time and pass other general information.
     * @param string  $heartBeatMethod       (optional) Specifies the HTTP method used to request HeartbeatUrl.
     * @param integer $timeout               (optional) Time (in seconds) we should wait while the call is ringing
     *                                       before canceling the call
     * @param string  $playDtmf              (optional) DTMF Digits to play to the call once it connects. 0-9, #, or *
     * @param string  $hideCallerId          (optional) Specifies if the caller id will be hidden
     * @param bool    $record                (optional) Specifies if the call should be recorded
     * @param string  $recordCallBackUrl     (optional) Recording parameters will be sent here upon completion
     * @param string  $recordCallBackMethod  (optional) Method used to request the RecordCallback URL.
     * @param bool    $transcribe            (optional) Specifies if the call recording should be transcribed
     * @param string  $transcribeCallBackUrl (optional) Transcription parameters will be sent here upon completion
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createGroupCall(
        $from,
        $to,
        $url,
        $groupConfirmKey,
        $groupConfirmFile,
        $method = null,
        $statusCallBackUrl = null,
        $statusCallBackMethod = null,
        $fallBackUrl = null,
        $fallBackMethod = null,
        $heartBeatUrl = null,
        $heartBeatMethod = null,
        $timeout = null,
        $playDtmf = null,
        $hideCallerId = null,
        $record = null,
        $recordCallBackUrl = null,
        $recordCallBackMethod = null,
        $transcribe = null,
        $transcribeCallBackUrl = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/calls/groupcall.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'          => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'From'                  => $from,
            'To'                    => $to,
            'Url'                   => $url,
            'GroupConfirmKey'       => $groupConfirmKey,
            'GroupConfirmFile'    => APIHelper::prepareFormFields($groupConfirmFile),
            'Method'                => $method,
            'StatusCallBackUrl'     => $statusCallBackUrl,
            'StatusCallBackMethod'  => $statusCallBackMethod,
            'FallBackUrl'           => $fallBackUrl,
            'FallBackMethod'        => $fallBackMethod,
            'HeartBeatUrl'          => $heartBeatUrl,
            'HeartBeatMethod'       => $heartBeatMethod,
            'Timeout'               => $timeout,
            'PlayDtmf'              => $playDtmf,
            'HideCallerId'          => $hideCallerId,
            'Record'                => var_export($record, true),
            'RecordCallBackUrl'     => $recordCallBackUrl,
            'RecordCallBackMethod'  => $recordCallBackMethod,
            'Transcribe'            => var_export($transcribe, true),
            'TranscribeCallBackUrl' => $transcribeCallBackUrl
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }
}
