<?php
/*
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace YtelAPIV3Lib\Controllers;

use YtelAPIV3Lib\APIException;
use YtelAPIV3Lib\APIHelper;
use YtelAPIV3Lib\Configuration;
use YtelAPIV3Lib\Models;
use YtelAPIV3Lib\Exceptions;
use YtelAPIV3Lib\Http\HttpRequest;
use YtelAPIV3Lib\Http\HttpResponse;
use YtelAPIV3Lib\Http\HttpMethod;
use YtelAPIV3Lib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class ShortCodeController extends BaseController
{
    /**
     * @var ShortCodeController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return ShortCodeController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Retrieve a list of Short Code assignment associated with your Ytel account.
     *
     * @param string $shortcode (optional) Only list Short Code Assignment sent from this Short Code
     * @param string $page      (optional) The page count to retrieve from the total results in the collection. Page
     *                          indexing starts at 1.
     * @param string $pagesize  (optional) The count of objects to return per page.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createListShortcodes(
        $shortcode = null,
        $page = null,
        $pagesize = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/dedicatedshortcode/listshortcode.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'Shortcode' => $shortcode,
            'page'      => $page,
            'pagesize'  => $pagesize
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrieve a single Short Code object by its shortcode assignment.
     *
     * @param string $shortcode List of valid Dedicated Short Code to your Ytel account
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createViewSMS(
        $shortcode
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/dedicatedshortcode/viewshortcode.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'Shortcode' => $shortcode
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * View a single Sms Short Code message.
     *
     * @param string $messageSid The unique identifier for the sms resource
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createViewSMS1(
        $messageSid
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/shortcode/viewsms.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'MessageSid' => $messageSid
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrieve a list of Short Code messages.
     *
     * @param string  $shortcode (optional) Only list messages sent from this Short Code
     * @param string  $to        (optional) Only list messages sent to this number
     * @param string  $dateSent  (optional) Only list messages sent with the specified date
     * @param integer $page      (optional) The page count to retrieve from the total results in the collection. Page
     *                           indexing starts at 1.
     * @param integer $pageSize  (optional) The count of objects to return per page.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createListSMS(
        $shortcode = null,
        $to = null,
        $dateSent = null,
        $page = null,
        $pageSize = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/shortcode/listsms.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'Shortcode' => $shortcode,
            'To'        => $to,
            'DateSent'  => $dateSent,
            'Page'      => $page,
            'PageSize'  => $pageSize
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Send Dedicated Shortcode
     *
     * @param integer $shortcode             Your dedicated shortcode
     * @param double  $to                    The number to send your SMS to
     * @param string  $body                  The body of your message
     * @param string  $method                (optional) Specifies the HTTP method used to request the required URL once
     *                                       the Short Code message is sent.GET or POST
     * @param string  $messagestatuscallback (optional) URL that can be requested to receive notification when Short
     *                                       Code message was sent.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSendSMS(
        $shortcode,
        $to,
        $body,
        $method = null,
        $messagestatuscallback = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/dedicatedshortcode/sendsms.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'          => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'shortcode'             => $shortcode,
            'to'                    => $to,
            'body'                  => $body,
            'method'                => $method,
            'messagestatuscallback' => $messagestatuscallback
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
     *
     * @param integer $page        (optional) The page count to retrieve from the total results in the collection. Page
     *                             indexing starts at 1.
     * @param integer $pagesize    (optional) Number of individual resources listed in the response per page
     * @param string  $from        (optional) Only list SMS messages sent from this number
     * @param string  $shortcode   (optional) Only list SMS messages sent to Shortcode
     * @param string  $datecreated (optional) Only list SMS messages sent in the specified date MAKE REQUEST
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createListInboundSMS(
        $page = null,
        $pagesize = null,
        $from = null,
        $shortcode = null,
        $datecreated = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/dedicatedshortcode/getinboundsms.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'page'        => $page,
            'pagesize'    => $pagesize,
            'From'        => $from,
            'Shortcode'   => $shortcode,
            'Datecreated' => $datecreated
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Update a dedicated shortcode.
     *
     * @param string $shortcode      List of valid dedicated shortcode to your Ytel account.
     * @param string $friendlyName   (optional) User generated name of the dedicated shortcode.
     * @param string $callbackMethod (optional) Specifies the HTTP method used to request the required
     *                               StatusCallBackUrl once call connects.
     * @param string $callbackUrl    (optional) URL that can be requested to receive notification when call has ended.
     *                               A set of default parameters will be sent here once the call is finished.
     * @param string $fallbackMethod (optional) Specifies the HTTP method used to request the required FallbackUrl once
     *                               call connects.
     * @param string $fallbackUrl    (optional) URL used if any errors occur during execution of InboundXML or at
     *                               initial request of the required Url provided with the POST.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateShortcode(
        $shortcode,
        $friendlyName = null,
        $callbackMethod = null,
        $callbackUrl = null,
        $fallbackMethod = null,
        $fallbackUrl = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/dedicatedshortcode/updateshortcode.json';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'Shortcode'      => $shortcode,
            'FriendlyName'   => $friendlyName,
            'CallbackMethod' => $callbackMethod,
            'CallbackUrl'    => $callbackUrl,
            'FallbackMethod' => $fallbackMethod,
            'FallbackUrl'    => $fallbackUrl
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }
}
